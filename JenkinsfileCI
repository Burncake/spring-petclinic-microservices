// Jenkinsfile CI - FINAL VERSION v3 (Fix for commit ID retrieval)

pipeline {
    agent any
    tools { jdk 'jdk-17' }
    options {
        buildDiscarder(logRotator(numToKeepStr: '5'))
        timestamps()
    }
    environment {
        // --- Existing Variables ---
        ALL_SERVICES = "spring-petclinic-admin-server spring-petclinic-api-gateway spring-petclinic-config-server spring-petclinic-customers-service spring-petclinic-discovery-server spring-petclinic-genai-service spring-petclinic-vets-service spring-petclinic-visits-service"
        SERVICES_WITHOUT_TESTS = "spring-petclinic-admin-server spring-petclinic-genai-service"
        DOCKERHUB_USERNAME = "22127422" // <--- *** Verify/Replace if needed ***
        DOCKERHUB_CREDENTIALS_ID = "docker-credentials" // Docker push credentials
        TESTS_FAILED_FLAG = "false"
        DOCKERFILE_PATH = "docker/Dockerfile"

        // --- New variables for Helm Repo Update ---
        // URL to the repo containing Helm charts and values files
        HELM_REPO_URL = "https://github.com/Burncake/petclinic-helm-config.git" // !!! REQUIRED: Replace e.g., https://github.com/your-username/petclinic-helm-config.git !!!
        // Branch in Helm repo to update (e.g., main)
        HELM_REPO_BRANCH = "main"
        // Credentials ID in Jenkins with push access to HELM_REPO_URL
        HELM_REPO_CREDENTIALS_ID = "377406a7-99bb-4796-8d2e-e32234ad757b" // !!! REQUIRED: Replace with your credential ID in Jenkins !!!
        // Path WITHIN the Helm repo checkout to the staging values file
        // Make sure this file exists in the Helm repo!
        HELM_STAGING_VALUES_PATH = "charts/petclinic-umbrella/values-staging.yaml" // !!! ADJUST path if needed !!!
        // Subdirectory name for checking out helm repo in workspace
        HELM_REPO_DIR = "helm-repo-checkout"

    }

    stages {

        // ============================================================
        // Stage 1: Detect Branch/Tag and Changes (MODIFIED - Git Commit ID retrieval)
        // ============================================================
        stage('Detect Branch/Tag and Changes') {
             steps {
                script {
                    echo "Pipeline started..."
                    // --- Debug: Print available Git environment variables ---
                    echo "DEBUG: env.TAG_NAME = ${env.TAG_NAME}"
                    echo "DEBUG: env.BRANCH_NAME = ${env.BRANCH_NAME}"
                    echo "DEBUG: env.GIT_COMMIT = ${env.GIT_COMMIT}"
                    echo "DEBUG: env.GIT_BRANCH = ${env.GIT_BRANCH}"

                    // --- Use local variables for determination ---
                    def boolean isTaggedBuild = false
                    def String imageVersionTag = ""

                    // --- Determine Build Type and Primary Tag (using local vars) ---
                    if (env.TAG_NAME?.matches('v\\d+\\.\\d+(\\.\\d+)?(-.+)?')) {
                        isTaggedBuild = true
                        imageVersionTag = env.TAG_NAME // Assign to local var
                        echo "Build Type: Tagged Build. Version: ${imageVersionTag}"
                    } else {
                        isTaggedBuild = false
                        echo "Build Type: Non-Tagged Build."
                        if (!env.GIT_COMMIT) {
                             error "FATAL: env.GIT_COMMIT variable is not set or is empty. Cannot determine commit ID."
                        }
                        try {
                            def String shortCommitId = env.GIT_COMMIT.take(7)
                            if (!shortCommitId || shortCommitId.length() != 7) {
                                error "FATAL: Failed to extract a valid 7-character commit ID from env.GIT_COMMIT ('${env.GIT_COMMIT}')."
                            }
                            imageVersionTag = shortCommitId // Assign to local var
                            echo "Using Commit ID: ${imageVersionTag}"
                        } catch (e) {
                             error "FATAL: Failed to extract short commit ID from env.GIT_COMMIT ('${env.GIT_COMMIT}'). Error: ${e.message}"
                        }
                    }

                    // --- Assign final values to environment variables ---
                    env.IS_TAGGED_BUILD = isTaggedBuild.toString() // Store as string "true" or "false"
                    env.IMAGE_VERSION_TAG = imageVersionTag
                    echo "Assigned env.IS_TAGGED_BUILD = ${env.IS_TAGGED_BUILD}"
                    echo "Assigned env.IMAGE_VERSION_TAG = ${env.IMAGE_VERSION_TAG}"


                    // --- Determine Changed Services (using local isTaggedBuild var) ---
                    echo "Determining services to process..."
                    env.CHANGED_SERVICES = "" // Initialize
                    // Use the local boolean variable for the condition
                    if (isTaggedBuild || env.BRANCH_NAME == 'main') {
                        echo "Processing ALL services for Tagged Build or 'main' branch."
                        env.CHANGED_SERVICES = env.ALL_SERVICES
                    } else {
                        // --- Logic for non-tagged FEATURE BRANCHES ---
                        echo "Running on feature branch '${env.BRANCH_NAME}'. Detecting changes..."
                        def changedFilesOutput = ''
                        try {
                            sh 'git fetch origin main:refs/remotes/origin/main'
                            changedFilesOutput = sh(script: "git diff --name-only origin/main...HEAD || git diff --name-only HEAD~1 HEAD || exit 0", returnStdout: true).trim()
                        } catch (e) {
                           echo "Warning: Could not compare against origin/main, falling back to HEAD~1 comparison. Error: ${e.message}"
                           changedFilesOutput = sh(script: "git diff --name-only HEAD~1 HEAD || exit 0", returnStdout: true).trim()
                        }
                        if (changedFilesOutput.isEmpty()) {
                            echo "No files found changed compared to origin/main or HEAD~1."
                        } else {
                           echo "Changed files detected:\n${changedFilesOutput}"
                        }
                        def changedFilesList = changedFilesOutput.split('\n').findAll { it }
                        def services = env.ALL_SERVICES.split(" ")
                        def detectedServiceChanges = []
                        for (service in services) {
                            if (changedFilesList.any { file -> file.startsWith(service + "/") }) {
                                detectedServiceChanges.add(service)
                            }
                        }
                        def commonFilesChanged = changedFilesList.any { file ->
                            file == 'pom.xml' || file == 'JenkinsfileCI.txt' || file == 'docker-compose.yaml' ||
                            file.startsWith('.mvn/') || file.startsWith('.github/') ||
                            file == 'mvnw' || file == 'mvnw.cmd'
                        }
                        if (commonFilesChanged) {
                            echo "Common file(s) changed. Processing ALL services."
                            env.CHANGED_SERVICES = env.ALL_SERVICES
                        } else if (!detectedServiceChanges.isEmpty()) {
                            echo "Changes detected in specific services."
                            env.CHANGED_SERVICES = detectedServiceChanges.join(" ")
                        } else {
                            echo "No relevant service or common file changes detected."
                            env.CHANGED_SERVICES = ""
                        }
                        // --- End Logic for non-tagged FEATURE BRANCHES ---
                    } // End else (feature branch)

                    // Log services to process
                    if (env.CHANGED_SERVICES?.trim()) {
                        echo "Services to process in subsequent stages: ${env.CHANGED_SERVICES}"
                    } else {
                        echo "No services require processing. Subsequent stages might be skipped."
                    }
                } // End script
            } // End steps
        } // End Stage 1

        // ============================================================
        // Stage 2: Test Services (Unchanged)
        // ============================================================
        stage('Test Services') {
            when { expression { return env.CHANGED_SERVICES?.trim() } }
            steps {
                 script {
                    def serviceList = env.CHANGED_SERVICES.trim().split(" ")
                    def jacocoExecFiles = []
                    def jacocoClassDirs = []
                    def jacocoSrcDirs = []
                    env.TESTS_FAILED_FLAG = "false"

                    for (service in serviceList) {
                        echo "--- Preparing to Test Service: ${service} ---"
                        if (env.SERVICES_WITHOUT_TESTS.contains(service)) {
                            echo "Skipping tests for ${service} (marked as having no tests)."
                            continue
                        }
                        dir(service) {
                            try {
                                echo "Running 'mvn clean test' for ${service}..."
                                sh 'mvn clean test'
                                echo "Tests completed for ${service}."
                                if (fileExists('target/jacoco.exec')) {
                                    echo "Found jacoco.exec for ${service}. Adding to aggregation list."
                                    jacocoExecFiles.add("${service}/target/jacoco.exec")
                                    jacocoClassDirs.add("${service}/target/classes")
                                    jacocoSrcDirs.add("${service}/src/main/java")
                                } else {
                                    echo "WARNING: jacoco.exec not found for ${service} after tests ran."
                                }
                            } catch (err) {
                                echo "ERROR: Tests FAILED for ${service}. Marking build as UNSTABLE."
                                env.TESTS_FAILED_FLAG = "true"
                            } finally {
                                echo "Publishing JUnit results for ${service}..."
                                junit allowEmptyResults: true, testResults: '**/target/surefire-reports/*.xml'
                            }
                        }
                    }
                    // JaCoCo aggregation and final status check
                     if (!jacocoExecFiles.isEmpty()) {
                        echo "--- Generating Aggregated JaCoCo Coverage Report ---" // [cite: 48]
                        echo "Aggregating JaCoCo data from ${jacocoExecFiles.size()} service(s)." // [cite: 48]
                        echo "Exec files: ${jacocoExecFiles.join(',')}" // [cite: 49]
                        echo "Class dirs: ${jacocoClassDirs.join(',')}" // [cite: 49]
                        echo "Source dirs: ${jacocoSrcDirs.join(',')}" // [cite: 50]
                        try {
                            jacoco( // [cite: 49]
                                execPattern: jacocoExecFiles.join(','), // [cite: 49]
                                classPattern: jacocoClassDirs.join(','), // [cite: 49]
                                sourcePattern: jacocoSrcDirs.join(','), // [cite: 50]
                                inclusionPattern: '**/*.class', // [cite: 50]
                                exclusionPattern: '**/test/**,**/model/**,**/domain/**,**/entity/**', // [cite: 50]
                                skipCopyOfSrcFiles: true, // [cite: 51]
                                
                                // *** Use the parameters generated by Pipeline Syntax ***
                                changeBuildStatus: true,
                                minimumBranchCoverage: '70',
                                minimumClassCoverage: '70',        // Added based on generator
                                minimumComplexityCoverage: '70',
                                minimumInstructionCoverage: '70',
                                minimumLineCoverage: '70',
                                minimumMethodCoverage: '70'        // Added based on generator
                                // *** End parameters from Pipeline Syntax ***
                            )
                            echo "JaCoCo aggregated report generated. Check Jenkins sidebar for the 'Code Coverage Trend' link."
                            echo "Coverage thresholds (Instruction, Line, Branch, Complexity) set to 70%. Build will be UNSTABLE if not met."
                            echo "NOTE: View per-service coverage by navigating the package structure within the aggregated report."
                        } catch (err) {
                            echo "ERROR: Failed to generate JaCoCo aggregated report: ${err.getMessage()}"
                            currentBuild.result = 'UNSTABLE'
                        }
                     } else {
                        echo "No JaCoCo execution data found to aggregate."
                     }
                    if (env.TESTS_FAILED_FLAG == "true") {
                        echo "Setting build status to UNSTABLE due to test failures."
                        currentBuild.result = 'UNSTABLE'
                    } else {
                        echo "All tests passed or were skipped."
                    }
                } // End script
            } // End steps
        } // End Stage 2


        // // ============================================================
        // // Stage 3: Build, Package & Push Docker Images (MODIFIED Tagging)
        // // ============================================================
        // stage('Build, Package & Push Docker Images') {
        //      when {
        //         // Condition remains the same: run if services changed and previous stages didn't fail
        //         expression { return env.CHANGED_SERVICES?.trim() && currentBuild.currentResult != 'FAILURE' }
        //     }
        //     steps {
        //         script {
        //             // Initial checks (DOCKERHUB_USERNAME, DOCKERHUB_CREDENTIALS_ID, DOCKERFILE_PATH) - same as before
        //             if (!env.DOCKERHUB_USERNAME || env.DOCKERHUB_USERNAME == 'your-dockerhub-username') { error "FATAL: DOCKERHUB_USERNAME environment variable is not set or not replaced in Jenkinsfile." }
        //             if (!env.DOCKERHUB_CREDENTIALS_ID || env.DOCKERHUB_CREDENTIALS_ID == 'dockerhub-credentials') { error "FATAL: DOCKERHUB_CREDENTIALS_ID environment variable is not set or not replaced in Jenkinsfile." }
        //             if (!fileExists(env.DOCKERFILE_PATH)) { error "FATAL: Common Dockerfile not found at ${env.DOCKERFILE_PATH}"}

        //             def serviceList = env.CHANGED_SERVICES.trim().split(" ")
        //             // IMAGE_VERSION_TAG is now set in Stage 1 (commit ID or Git Tag)
        //             echo "Using Primary Image Tag for Docker operations: ${env.IMAGE_VERSION_TAG}"
        //             def buildFailed = false

        //             withCredentials([usernamePassword(credentialsId: env.DOCKERHUB_CREDENTIALS_ID, usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
        //                 try { // Docker login
        //                     echo "Attempting explicit Docker login..."
        //                     sh "echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin"
        //                     echo "Explicit Docker login successful."
        //                 } catch (e) {
        //                     error "FATAL: Explicit Docker login failed. Check credentials and permissions. Error: ${e.message}"
        //                 }

        //                 for (service in serviceList) {
        //                     echo "--- Processing Service: ${service} ---"
        //                     def artifactNameArgValue = ""

        //                     // 1. Package JAR (same logic as before)
        //                     dir(service) {
        //                         try {
        //                             echo "Running 'mvn clean package -DskipTests' for ${service}..."
        //                             sh 'mvn clean package -DskipTests'
        //                             echo "Maven package successful for ${service}."
        //                             def jarFileFullPath = sh(script: 'find target -maxdepth 1 -name "*.jar" -print -quit', returnStdout: true).trim()
        //                             if (!jarFileFullPath) { error "Could not find JAR file in target/ for ${service}." }
        //                             def jarFileRelativePath = "${service}/${jarFileFullPath}"
        //                             if (jarFileRelativePath.endsWith('.jar')) {
        //                                 artifactNameArgValue = jarFileRelativePath.substring(0, jarFileRelativePath.length() - 4)
        //                             } else { error("Could not remove .jar suffix from ${jarFileRelativePath}") }
        //                             echo "JAR path relative to root: ${jarFileRelativePath}"
        //                             echo "ARTIFACT_NAME build-arg value: ${artifactNameArgValue}"
        //                         } catch (err) {
        //                             echo "ERROR: Maven package FAILED for ${service}: ${err.getMessage()}"
        //                             buildFailed = true
        //                             if (currentBuild.currentResult != 'FAILURE') { currentBuild.result = 'UNSTABLE' }
        //                             continue // Skip Docker steps
        //                         }
        //                     } // End dir(service)

        //                     // 2. Build and Push Docker Image (Using IMAGE_VERSION_TAG)
        //                     if (artifactNameArgValue) {
        //                         try {
        //                             def imageName = "${env.DOCKERHUB_USERNAME}/${service}"
        //                             // Use the determined version tag (Commit ID or Git Tag)
        //                             def primaryTag = env.IMAGE_VERSION_TAG // Use tag determined in Stage 1
        //                             echo "Building Docker image: ${imageName}:${primaryTag} using ${env.DOCKERFILE_PATH}"
        //                             def dockerImage = docker.build("${imageName}:${primaryTag}", "-f ${env.DOCKERFILE_PATH} --build-arg ARTIFACT_NAME=${artifactNameArgValue} .")

        //                             echo "Pushing Docker image: ${imageName}:${primaryTag}"
        //                             dockerImage.push() // Push the primary tag (Commit ID or Git Tag)

        //                             // --- Updated conditional push logic ---
        //                             // Push 'latest' tag ONLY for non-tagged builds on the 'main' branch
        //                             if (env.BRANCH_NAME == 'main' && env.IS_TAGGED_BUILD == "false") {
        //                                 echo "Pushing additional tag 'latest' for main branch build: ${imageName}:latest"
        //                                 dockerImage.push('latest')
        //                             }
        //                             // --- Removed push of branch name tag ---

        //                             echo "Docker build and push successful for ${service} with tag ${primaryTag}."
        //                             // Add echo for latest tag if pushed
        //                             if (env.BRANCH_NAME == 'main' && env.IS_TAGGED_BUILD == "false") {
        //                                  echo "Also pushed tag 'latest' for ${service}."
        //                             }

        //                         } catch (err) {
        //                             echo "ERROR: Docker build or push FAILED for ${service}: ${err.getMessage()}"
        //                             buildFailed = true
        //                             if (currentBuild.currentResult != 'FAILURE') { currentBuild.result = 'UNSTABLE' }
        //                         }
        //                     } // End if (artifactNameArgValue)
        //                 } // End for loop
        //             } // End withCredentials

        //             // Final stage status check (same as before)
        //             if (buildFailed) {
        //                 echo "One or more services failed during package or docker build/push."
        //                 if (currentBuild.currentResult != 'FAILURE') { currentBuild.result = 'UNSTABLE' }
        //             } else {
        //                 echo "All processed services completed package and docker build/push successfully."
        //             }
        //         } // End script
        //     } // End steps
        // } // End Stage 3

        // // ============================================================
        // // Stage 4: Update Staging Config in Helm Repo (NEW STAGE)
        // // ============================================================
        // stage('Update Staging Config in Helm Repo') {
        //     // Only run this stage for successful tagged builds
        //     when {
        //         expression { return env.IS_TAGGED_BUILD == "true" && currentBuild.currentResult != 'FAILURE' && currentBuild.currentResult != 'UNSTABLE' }
        //     }
        //     steps {
        //         script {
        //             echo "Tagged build successful (${env.IMAGE_VERSION_TAG}). Updating Helm values for Staging environment..."
        //             // Check for required environment variables defined earlier
        //             if (!env.HELM_REPO_URL || !env.HELM_REPO_CREDENTIALS_ID || !env.HELM_STAGING_VALUES_PATH) {
        //                 error "FATAL: Missing environment variables for Helm repo update (HELM_REPO_URL, HELM_REPO_CREDENTIALS_ID, HELM_STAGING_VALUES_PATH)"
        //             }

        //             // Use credentials with push access to the Helm repo
        //             // Ensure HELM_REPO_CREDENTIALS_ID is correctly set in environment block
        //             withCredentials([usernamePassword(credentialsId: env.HELM_REPO_CREDENTIALS_ID, usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD')]) { // Or use SSH key credentials if configured
        //                 // Check out the Helm chart repo into a specific subdirectory
        //                 dir(env.HELM_REPO_DIR) {
        //                     echo "Checking out Helm chart repository: ${env.HELM_REPO_URL} branch: ${env.HELM_REPO_BRANCH}"
        //                     deleteDir() // Clean before checkout
        //                     // Checkout using credentials specified
        //                     checkout([
        //                         $class: 'GitSCM',
        //                         branches: [[name: env.HELM_REPO_BRANCH]],
        //                         userRemoteConfigs: [[
        //                             url: env.HELM_REPO_URL,
        //                             credentialsId: env.HELM_REPO_CREDENTIALS_ID // Use the push credentials
        //                         ]]
        //                     ])
        //                     echo "Checkout of Helm repo complete into ./${env.HELM_REPO_DIR}"

        //                     // --- Modify the staging values file ---
        //                     echo "Attempting to read and update ${env.HELM_STAGING_VALUES_PATH} with image tag: ${env.IMAGE_VERSION_TAG}"
        //                     try {
        //                         // Read the existing YAML file using Pipeline Utility Steps plugin
        //                         // Ensure this plugin is installed in Jenkins!
        //                         def valuesData = readYaml file: env.HELM_STAGING_VALUES_PATH
        //                         if (!valuesData) {
        //                              error "Failed to read YAML from ${env.HELM_STAGING_VALUES_PATH}. Is the file path correct, file valid, and plugin installed?"
        //                         }

        //                         // Update the image tag for all services
        //                         // This assumes the structure matches: serviceName: { image: { tag: ... } }
        //                         // *** Uses camelCase keys based on previous discussion - ADJUST if needed ***
        //                         def serviceKeys = [
        //                             "adminServer", "apiGateway", "configServer", "customersService",
        //                             "discoveryServer", "genaiService", "vetsService", "visitsService"
        //                         ]
        //                         serviceKeys.each { key ->
        //                             if (valuesData."${key}") {
        //                                 // Ensure the nested structure exists before assigning
        //                                 if (!valuesData."${key}".image) { valuesData."${key}".image = [:] }
        //                                 valuesData."${key}".image.tag = env.IMAGE_VERSION_TAG // Set the tag
        //                                 echo "Set ${key}.image.tag = ${env.IMAGE_VERSION_TAG}"
        //                             } else {
        //                                 // Warn if a service key defined above isn't found in the values file
        //                                 echo "WARN: Key '${key}' not found in ${env.HELM_STAGING_VALUES_PATH}. Skipping tag update for it."
        //                             }
        //                         }

        //                         // Write the updated data back to the YAML file
        //                         writeYaml file: env.HELM_STAGING_VALUES_PATH, data: valuesData, overwrite: true
        //                         echo "Successfully updated ${env.HELM_STAGING_VALUES_PATH} in workspace."

        //                         // --- Commit and Push the changes ---
        //                         echo "Committing and pushing updated values file to ${env.HELM_REPO_BRANCH} branch of Helm repo..."
        //                         sh "git config user.email 'jenkins-ci@example.com'"
        //                         sh "git config user.name 'Jenkins CI Bot'"
        //                         sh "git add ${env.HELM_STAGING_VALUES_PATH}"
        //                         sh "git commit -m 'CI: Update staging image tags to ${env.IMAGE_VERSION_TAG} [skip ci]'"

        //                         // --- Modified Push Command ---
        //                         // Extract repo host and path (e.g., github.com/user/repo.git) from the original URL
        //                         def repoHostAndPath = env.HELM_REPO_URL.split('//')[1]
        //                         // Construct the authenticated URL
        //                         // NOTE: Assumes PAT ($GIT_PASSWORD) doesn't contain characters needing URL encoding. Usually safe for GitHub PATs.
        //                         def pushUrl = "https://${GIT_USER}:${GIT_PASSWORD}@${repoHostAndPath}"
        //                         echo "Pushing changes using authenticated URL..."
        //                         // Push using the authenticated URL to the target branch
        //                         sh "git push ${pushUrl} HEAD:${env.HELM_REPO_BRANCH}"
        //                         // --- End Modified Push Command ---

        //                         echo "Changes pushed successfully to Helm repository."

        //                     } catch (e) {
        //                         echo "ERROR: Failed to update or push changes to Helm repository!"
        //                         echo e.getMessage()
        //                         currentBuild.result = 'FAILURE' // Fail the build if update fails
        //                         error("Failed to update Helm repository configuration.")
        //                     }
        //                 } // End dir(helm-repo-checkout)
        //             } // End withCredentials
        //         } // End script
        //     } // End steps
        // } // End Stage 4 (New Stage)


    } // End stages

    // ============================================================
    // Post Actions (MODIFIED cleanWs & success message)
    // ============================================================
    post {
        always {
            echo "Pipeline finished with final status: ${currentBuild.currentResult}"
            // Add deleteDirs: true to ensure subdirectories like HELM_REPO_DIR are removed
            cleanWs(deleteDirs: true)
        }
        success {
            echo "Build finished with status SUCCESS."
            // Wrap conditional logic in a script block
            script {
                if (env.IS_TAGGED_BUILD == "true") {
                    echo "Successfully pushed image tag ${env.IMAGE_VERSION_TAG} and updated Helm repo."
                }
            }
        }
        unstable {
            echo "Build finished with status UNSTABLE. Check logs for test failures, build issues, or Docker push problems."
        }
        failure {
            echo "Build FAILED. Check logs for critical errors."
        }
    } // End post

} // End pipeline