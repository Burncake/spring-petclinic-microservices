# helm-charts/petclinic-umbrella/charts/vets-service/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "vets-service.fullname" . }}
  labels:
    {{- include "vets-service.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "vets-service.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "vets-service.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "vets-service.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}

      # --- ADD INIT CONTAINERS ---
      initContainers:
        - name: wait-for-config-server
          image: busybox:1.36
          command: ['sh', '-c', 'until nc -z -w 2 {{ .Release.Name }}-config-server 8888; do echo "[vets-service] waiting for config-server"; sleep 2; done;']
        - name: wait-for-discovery-server
          image: busybox:1.36
          command: ['sh', '-c', 'until nc -z -w 2 {{ .Release.Name }}-discovery-server 8761; do echo "[vets-service] waiting for discovery-server"; sleep 2; done;']
      # --- END INIT CONTAINERS ---

      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}

          # --- ADD ENVIRONMENT VARIABLES ---
          env:
            - name: CONFIG_SERVER_URL
              value: "http://{{ .Release.Name }}-config-server:8888"
            - name: SPRING_PROFILES_ACTIVE
              value: "kubernetes"
            # Set Eureka properties, disable Zipkin health, and force port via Java System Properties
            - name: JAVA_TOOL_OPTIONS
              value: >-
                -Deureka.client.serviceUrl.defaultZone=http://{{ .Release.Name }}-discovery-server:8761/eureka/
                -Deureka.client.registerWithEureka=true
                -Deureka.client.fetchRegistry=true
                -Dmanagement.health.zipkin.enabled=false
                -Dserver.port=8083
            - name: EUREKA_INSTANCE_HOSTNAME
              value: "{{ .Release.Name }}-vets-service"
          ports:
            - name: http
              containerPort: {{ .Values.service.port }} # 8083 from values.yaml
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /actuator/health # Use base health endpoint
              port: http
            initialDelaySeconds: 90 # Using same delays as customers-service
            periodSeconds: 10
            failureThreshold: 6
          readinessProbe:
            httpGet:
              path: /actuator/health # Use base health endpoint
              port: http
            initialDelaySeconds: 60 # Using same delays as customers-service
            periodSeconds: 10
            # failureThreshold: 3
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}